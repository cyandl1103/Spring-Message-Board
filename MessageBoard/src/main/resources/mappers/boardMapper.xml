<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.mappers.board">
	<!-- SQL의 모든 쿼리들을 작성함 -->
	<!-- 모든 게시글 조회하기 -->
	<select id="list" resultType="com.board.domain.BoardDTO">
		select seq, subject, content, name, reg_date, readCount
		from board;
	</select>
	
	<!-- 현재 가장 큰 게시물 seq(번호) 가져오기 -->
	<select id="maxSeq" resultType="java.lang.Integer">
		select max(seq)
		from board;
	</select>
	

	<!-- 게시글 삽입 -->
	<insert id="register">
		insert into board(seq, subject, content, name, reg_date, readCount, file)
		values (#{seq}, #{subject}, #{content}, #{name}, #{reg_date},0, #{file});
	</insert>
	

	<!-- 조회수 증가 -->
	<update id="updateReadCount">
		update board
		set readcount = readcount + 1
		where seq = #{seq};
	</update>
	
	
	<!-- 게시물 조회 -->
	<select id="view" resultType="com.board.domain.BoardDTO">
		select seq, subject, content, name, reg_date, readCount, file
		from board
		where seq = #{seq};
	</select>
	
	<!-- 게시물 삭제 -->
	<delete id="delete">
		delete from board
		where seq = #{seq};
	</delete>
	
	<!-- 게시물 삭제 -->
	<update id="update">
		update board
		set subject = #{subject}, content = #{content}
		where seq = #{seq};
	</update>
	
	<!-- 제목 기준으로 게시물 검색 -->
	<select id="search" resultType="com.board.domain.BoardDTO">
		select seq, subject, content, name, reg_date, readCount
		from board
		where subject like CONCAT('%',#{subject},'%')
		order by seq desc
<!-- 			subject like #{subject}; -->
	
	</select>
	
	<!-- FOR PAGING -->	
		<!-- 	10개씩 select -->
		<!-- 	limit n1, n2 -->
		<!-- 	n1 :  skip 할 행의 수 -->
		<!-- 	n2 :  count 할 행의 수 -->
	<!-- 게시물 목록 -->	
	<select id="pageList" resultType="com.board.domain.BoardDTO">
		select seq, subject, content, name, reg_date, readCount 
		from board 
		order by seq desc
		limit #{skip},#{amount};
	</select>
	
	<!-- 총 게시물의 수 -->
	<select id="getTotal" resultType="int">
		select count(*) 
		from board;
	</select>
	
	<!-- 해당 제목을 가진 총 게시물의 수 -->
	<select id="getTotalSubject" resultType="int">
		select count(*) 
		from board
		where subject like CONCAT('%',#{subject},'%')
		order by seq desc;
	</select>
	
		<!-- 제목 기준으로 게시물 검색 -->
	<select id="pageSearch" resultType="com.board.domain.BoardDTO">
		select seq, subject, content, name, reg_date, readCount
		from board
		where subject like CONCAT('%',#{subject},'%')
		order by seq desc
		limit #{skip},#{amount};
	</select>
	
	<!-- 검색어 추천 - 중복 제거 -->
	<select id="recommendSearch" resultType="com.board.domain.BoardDTO">
		select distinct subject
		from board
		where subject like CONCAT('%',#{subject},'%')
		order by 
		    case when subject = #{subject} then 0
		    when subject like CONCAT(#{subject},'%') then 1
		    when subject like CONCAT('%',#{subject},'%') then 2
		    when subject like CONCAT('%',#{subject}) then 3
		    else 4 end;
		;
	</select>
	
	<!-- 댓글 목록 -->
	<select id="replyList" resultType="com.board.domain.ReplyDTO">
		select rseq, bseq, name, content, rep, reg_date, re_step, re_level
		from board_reply
		where bseq = #{bseq}
		order by rep, re_step;
	</select>
	
	<!-- 댓글 삽입 -->
	<insert id="replyRegister">
		insert into board_reply (rseq, bseq, content, name, rep,  reg_date, re_step, re_level, parent_rseq, child)
		values (#{rseq}, #{bseq}, #{content}, #{name}, #{rep}, #{reg_date}, #{re_step}, #{re_level}, #{parent_rseq}, #{child});
	</insert>
	
	<!-- 현재 가장 큰 댓글 rseq(번호) 가져오기 -->
	<select id="maxRSeq" resultType="java.lang.Integer">
		select max(rseq)
		from board_reply;
	</select>
	
	<!-- 부모의 rep 값 가져오기 -->
	<select id="ParentRep" resultType="java.lang.Integer">
		select rep
		from board_reply
		where rseq = #{parent_rseq};
	</select>
	
	<!-- 부모의 re_level 값 가져오기 -->
	<select id="ParentReLevel" resultType="java.lang.Integer">
		select re_level
		from board_reply
		where rseq = #{parent_rseq};
	</select>
	
	<!-- 동일한 부모를 가진 대댓글들 중 가장 큰 re_step의 값 가져오기 -->
	<select id="MaxParentReStep" resultType="java.lang.Integer">
		select max(re_step)
		from board_reply
		where parent_rseq = #{parent_rseq};
	</select>
	
	<!-- 부모의 마지막 자식 찾음 -->
	<select id="RseqFromReStep" resultType="java.lang.Integer">
		select rseq
		from board_reply
		where re_step = #{re_step} and parent_rseq = #{parent_rseq};
	</select>
	
	<!-- 자식의 수 가져옴 -->
	<select id="getChild" resultType="java.lang.Integer">
		select child
		from board_reply
		where rseq = #{rseq};
	</select>
	
	<!-- 부모의 re_step 값 가져오기 -->
	<select id="ParentReStep" resultType="java.lang.Integer">
		select re_step
		from board_reply
		where rseq = #{parent_rseq};
	</select>
	
	<!-- 부모의 child 1 증가 -->
	<update id="updateParentChild">
		update board_reply
		set child = child + 1
		where rseq = #{parent_rseq};
	</update>
	
	<!-- re_step 재설정 - 증가-->
	<update id="updateReStep" parameterType="map">
		update board_reply
		set re_step = re_step + 1
		where rep = #{rep} and re_step >= #{re_step};
	</update>
	
	<select id="reply" resultType="com.board.domain.ReplyDTO">
		select rseq, bseq, content, name, reg_date, rep, re_level, re_step, parent_rseq, child
		from board_reply
		where rseq = #{rseq};
	</select>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply">
		delete from board_reply
		where rseq = #{rseq};
	</delete>
	
	<!-- 부모의 child 1 증가 -->
	<update id="updateParentChildDelete">
		update board_reply
		set child = child - 1
		where rseq = #{rseq};
	</update>
	
	<!-- re_step 재설정 - 감소 -->
	<update id="updateReStepDelete" parameterType="map">
		update board_reply
		set re_step = re_step - 1
		where rep = #{rep} and re_step >= #{re_step};
	</update>

</mapper>